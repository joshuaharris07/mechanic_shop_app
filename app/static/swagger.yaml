swagger: '2.0'
info:
  title: "Mechanic Shop API"
  description: "This is an API for managing service tickits at a mechanic shop"
  version: "1.0.0"
host: "127.0.0.1:5000"
schemes:
  - "http"
consumes:
  - "application/json"
produces:
  - "application/json"

securityDefinitions:
  bearerAuth:
    type: apiKey
    name: Authorization
    in: header

paths:
  /customers/login:
    post:
      tags:
        - Customers
      summary: "Login endpoint, (generates token)"
      description: "Validates customer credentials, generates and return a customer specific token."
      parameters:
        - in: "body"
          name: "body"
          description: "Login Credentials"
          required: true
          schema:
            $ref: "#/definitions/LoginCredentials"
      responses:
        200:
          description: "Login successful"
          schema:
            $ref: "#/definitions/LoginResponse"
          examples:
            application/json:
              token: "alhgslhflskflsdhfks192aslk..."
              message: "Login successful"
              status: "success"


  /customers:
    post:
      tags:
        - Customers
      summary: "Endpoint to create/register a new customer."
      description: "Endpoint to create a new customer in our Mechanic Shop system, emails must be unique."
      parameters:
        - in: "body"
          name: "body"
          description: "Information required to create a new Customer."
          required: true
          schema:
            $ref: "#/definitions/CreateCustomerPayload"
      responses:
        201:
          descriptions: "Successful Customer Creation"
          schema:
            $ref: "#/definitions/CreateCustomerResponse"
          examples:
            application/json:
              id: 1
              name: John Doe
              email: johnd@email.com
              password: password123
              phone: "8889998888"

    get:
      tags:
        - Customers
      summary: "Returns all Customers"
      description: "Endpoint to retrieve a list of all customers."
      responses:
        200:
          description: "Retrieved Customers Successfully"           
          schema:
            $ref: "#/definitions/AllCustomers"   
    
    put: # In the api/docs this functions but doesn't provide the curl and additional information confirming the changes took place.
      tags:
        - Customers
      summary: "Endpoint to update a customer."
      description: "Endpoint to update a customer, this is a token authenticated route, and the customer must be logged in to update their account."
      security:
        - bearerAuth: []
      parameters: 
        - in: "body"
          name: "body"
          description: "Information required to update a Customer."
          required: true
          schema: 
            $ref: "#/definitions/UpdateCustomerPayload"
          responses: 
            200:
              descriptions: "Successfully Updated Customer"
              schema: 
                $ref: "#/definitions/UpdateCustomerResponse"
              examples:
                application/json:
                  id: 1
                  name: Dohn Joe
                  DOB: "9998889999"
                  email: dohnj@email.com
                  password: password123

    delete:
      tags:
        - Customers
      summary: "Enpoint to delete a customer"
      description: "Endpoint to delete a customer. Requires token authentication, customer must be logged in to delete their account"
      security:
        - bearerAuth: []
      responses:
        200:
          description: "Successfully Deleted Customer"           
          schema:
            $ref: "#/definitions/DeleteCustomerResponse"
          examples:
            application/json:
              message: "Successfully deleted customer <customer_id>."


  /inventory:
    post:
      tags:
        - Inventory
      summary: "Endpoint to add a new part."
      description: "Endpoint to add a new part in our Mechanic Shop system."
      parameters:
        - in: "body"
          name: "body"
          description: "Information required to create a new Part."
          required: true
          schema:
            $ref: "#/definitions/CreatePartPayload"
      responses:
        201:
          descriptions: "Successful Part Creation"
          schema:
            $ref: "#/definitions/CreatePartResponse"
          examples:
            application/json:
              id: 1
              name: Front Bumper
              price: 139.99

    get:
      tags:
        - Inventory
      summary: "Returns all Inventory"
      description: "Endpoint to retrieve a list of all parts."
      responses:
        200:
          description: "Retrieved Inventory Successfully"           
          schema:
            $ref: "#/definitions/AllInventory"   
  
  /inventory/{part_id}:
    put: # TODO Same issue as customers.
      tags:
        - Inventory
      summary: "Endpoint to update a part."
      description: "Endpoint to update a part."
      parameters: 
        - in: "path"
          name: "part_id"
          required: true
          type: "integer"
          description: "The ID of the part to update."
        - in: "body"
          name: "body"
          description: "Information required to update a Part."
          required: true
          schema: 
            $ref: "#/definitions/UpdatePartPayload"
          responses: 
            200:
              descriptions: "Successfully Updated Part"
              schema: 
                $ref: "#/definitions/UpdatePartResponse"
              examples:
                application/json:
                  id: 1
                  name: Front Bumper
                  price: 139.99

    delete:
      tags:
        - Inventory
      summary: "Enpoint to delete a part"
      description: "Endpoint to delete a part."
      parameters:
        - in: "path"
          name: "part_id"
          required: true
          type: "integer"
          description: "The ID of the part to update."
      responses:
        200:
          description: "Successfully Deleted Part"           
          schema:
            $ref: "#/definitions/DeletePartResponse"
          examples:
            application/json:
              message: "Part was successfully deleted <part_id>."

definitions: 

  LoginCredentials:
    type: "object"
    properties:
      email:
        type: "string"
      password:
        type: "string"
      
    required:
      - email
      - password
    

  LoginResponse:
    type: "object"
    properties:
      token:
        type: "string"
      message:
        type: "string"
      status:
        type: "string"


  CreateCustomerPayload:
    type: "object"
    properties:
      name:
        type: "string"
      email:
        type: "string"
      phone:
        type: "string"
      password:
        type: "string"
      
    required:
      - name
      - email
      - phone
      - password


  CreateCustomerResponse:
    type: "object"
    properties:
      id:
        type: "integer"
      name:
        type: "string"
      email:
        type: "string"
      phone:
        type: "string"
      password:
        type: "string"


  AllCustomers:
    type: "array"
    items:
      type: "object"
      properties:
        id:
          type: "integer"
        name:
          type: "string"
        email:
          type: "string"
        phone:
          type: "string"
        password:
          type: "string"


  UpdateCustomerPayload:
    type: "object"
    properties:
      name:
        type: "string"
      email:
        type: "string"
      phone:
        type: "string"
      password:
        type: "string"
      
    required:
      - name
      - email
      - phone
      - password


  UpdateCustomerResponse:
    type: "object"
    properties:
      id:
        type: "integer"
      name:
        type: "string"
      email:
        type: "string"
      phone:
        type: "string"
      password:
        type: "string"


  DeleteCustomerResponse:
    type: "object"
    properties:
      message:
        type: "string"   
  

  CreatePartPayload:
    type: "object"
    properties:
      name:
        type: "string"
      price:
        type: "number"
        format: "float"
      
    required:
      - name
      - price


  CreatePartResponse:
    type: "object"
    properties:
      id:
        type: "integer"
      name:
        type: "string"
      price:
        type: "number"
        format: "float"


  AllInventory:
    type: "array"
    items:
      type: "object"
      properties:
        id:
          type: "integer"
        name:
          type: "string"
        price:
          type: "number"
          format: "float"


  UpdatePartPayload:
    type: "object"
    properties:
      name:
        type: "string"
      price:
        type: "number"
        format: "float"
      
    required:
      - name
      - price


  UpdatePartResponse:
    type: "object"
    properties:
      id:
        type: "integer"
      name:
        type: "string"
      price:
        type: "number"
        format: "float"


  DeletePartResponse:
    type: "object"
    properties:
      message:
        type: "string"   