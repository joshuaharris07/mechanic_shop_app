swagger: '2.0'
info:
  title: "Mechanic Shop API"
  description: "This is an API for managing service tickits at a mechanic shop"
  version: "1.0.0"
host: "127.0.0.1:5000"
schemes:
  - "http"
consumes:
  - "application/json"
produces:
  - "application/json"

securityDefinitions:
  bearerAuth:
    type: apiKey
    name: Authorization
    in: header

paths:
  /customers/login:
    post:
      tags:
        - Customers
      summary: "Login endpoint, (generates token)"
      description: "Validates customer credentials, generates and return a customer specific token."
      parameters:
        - in: "body"
          name: "body"
          description: "Login Credentials"
          required: true
          schema:
            $ref: "#/definitions/LoginCredentials"
      responses:
        200:
          description: "Login successful"
          schema:
            $ref: "#/definitions/LoginResponse"
          examples:
            application/json:
              token: "alhgslhflskflsdhfks192aslk..."
              message: "Login successful"
              status: "success"


  /customers:
    post:
      tags:
        - Customers
      summary: "Endpoint to create/register a new customer."
      description: "Endpoint to create a new customer in our Mechanic Shop system, emails must be unique."
      parameters:
        - in: "body"
          name: "body"
          description: "Information required to create a new Customer."
          required: true
          schema:
            $ref: "#/definitions/CreateCustomerPayload"
      responses:
        201:
          descriptions: "Successful Customer Creation"
          schema:
            $ref: "#/definitions/CreateCustomerResponse"
          examples:
            application/json:
              id: 1
              name: John Doe
              email: johnd@email.com
              password: password123
              phone: "8889998888"

    get:
      tags:
        - Customers
      summary: "Returns all Customers"
      description: "Endpoint to retrieve a list of all customers."
      responses:
        200:
          description: "Retrieved Customers Successfully"           
          schema:
            $ref: "#/definitions/AllCustomers"   
    
    put:
      tags:
        - Customers
      summary: "Endpoint to update a customer."
      description: "Endpoint to update a customer, this is a token authenticated route, and the customer must be logged in to update their account."
      security:
        - bearerAuth: []
      parameters: 
        - in: "body"
          name: "body"
          description: "Information required to update a Customer."
          required: true
          schema: 
            $ref: "#/definitions/UpdateCustomerPayload"
      responses: 
        200:
          descriptions: "Successfully Updated Customer"
          schema: 
            $ref: "#/definitions/UpdateCustomerResponse"
          examples:
            application/json:
              id: 1
              name: Dohn Joe
              DOB: "9998889999"
              email: dohnj@email.com
              password: password123

    delete:
      tags:
        - Customers
      summary: "Enpoint to delete a customer"
      description: "Endpoint to delete a customer. Requires token authentication, customer must be logged in to delete their account"
      security:
        - bearerAuth: []
      responses:
        200:
          description: "Successfully Deleted Customer"           
          schema:
            $ref: "#/definitions/DeleteCustomerResponse"
          examples:
            application/json:
              message: "Successfully deleted customer <customer_id>."

  /customers/search:
    get:
      tags:
        - Customers
      summary: "Search for customers by name"
      description: "Endpoint to search for customers by their name. Supports pagination with optional 'page' and 'per_page' query parameters."
      parameters:
        - name: name
          in: query
          description: "The name or part of the name to search for."
          required: true
          type: string
      responses:
        200:
          description: "Successfully retrieved matching customers."
          schema:
            $ref: "#/definitions/AllCustomers"
          examples:
            application/json:
              - id: 1
                name: "John Doe"
                email: "johndoe@email.com"
                phone: "1234567890"
              - id: 2
                name: "Jane Smith"
                email: "janesmith@email.com"
                phone: "0987654321"

  /inventory:
    post:
      tags:
        - Inventory
      summary: "Endpoint to add a new part."
      description: "Endpoint to add a new part in our Mechanic Shop system."
      parameters:
        - in: "body"
          name: "body"
          description: "Information required to create a new Part."
          required: true
          schema:
            $ref: "#/definitions/CreatePartPayload"
      responses:
        201:
          descriptions: "Successful Part Creation"
          schema:
            $ref: "#/definitions/CreatePartResponse"
          examples:
            application/json:
              id: 1
              name: Front Bumper
              price: 139.99

    get:
      tags:
        - Inventory
      summary: "Returns all Inventory"
      description: "Endpoint to retrieve a list of all parts."
      responses:
        200:
          description: "Retrieved Inventory Successfully"           
          schema:
            $ref: "#/definitions/AllInventory"   
  
  /inventory/{part_id}:
    put:
      tags:
        - Inventory
      summary: "Endpoint to update a part."
      description: "Endpoint to update a part."
      parameters: 
        - in: "path"
          name: "part_id"
          required: true
          type: "integer"
          description: "The ID of the part to update."
        - in: "body"
          name: "body"
          description: "Information required to update a Part."
          required: true
          schema: 
            $ref: "#/definitions/UpdatePartPayload"
      responses: 
        200:
          descriptions: "Successfully Updated Part"
          schema: 
            $ref: "#/definitions/UpdatePartResponse"
          examples:
            application/json:
              id: 1
              name: Front Bumper
              price: 139.99

    delete:
      tags:
        - Inventory
      summary: "Enpoint to delete a part"
      description: "Endpoint to delete a part."
      parameters:
        - in: "path"
          name: "part_id"
          required: true
          type: "integer"
          description: "The ID of the part to delete."
      responses:
        200:
          description: "Successfully Deleted Part"           
          schema:
            $ref: "#/definitions/DeletePartResponse"
          examples:
            application/json:
              message: "Part was successfully deleted <part_id>."


  /mechanics:
    post:
      tags:
        - Mechanics
      summary: "Endpoint to add a new mechanic."
      description: "Endpoint to add a new mechanic in our Mechanic Shop system."
      parameters:
        - in: "body"
          name: "body"
          description: "Information required to create a new Mechanic."
          required: true
          schema:
            $ref: "#/definitions/CreateMechanicPayload"
      responses:
        201:
          descriptions: "Successful Mechanic Creation"
          schema:
            $ref: "#/definitions/CreateMechanicResponse"
          examples:
            application/json:
              id: 1
              name: John Mechanic
              email: john@bodyshop.com
              phone: 8889997777
              salary: 72000
              ticket_count: 0

    get:
      tags:
        - Mechanics
      summary: "Returns all Mechanics"
      description: "Endpoint to retrieve a list of all mechanics."
      responses:
        200:
          description: "Retrieved Mechanics Successfully"           
          schema:
            $ref: "#/definitions/AllMechanics"   
  
  /mechanics/{mechanic_id}:
    put:
      tags:
        - Mechanics
      summary: "Endpoint to update a mechanic."
      description: "Endpoint to update a mechanic."
      parameters: 
        - in: "path"
          name: "mechanic_id"
          required: true
          type: "integer"
          description: "The ID of the mechanic to update."
        - in: "body"
          name: "body"
          description: "Information required to update a Mechanic."
          required: true
          schema: 
            $ref: "#/definitions/UpdateMechanicPayload"
      responses: 
        200:
          descriptions: "Successfully Updated Mechanic"
          schema: 
            $ref: "#/definitions/UpdateMechanicResponse"
          examples:
            application/json:
              id: 1
              name: John Mechanic
              email: john@bodyshop.com
              phone: 8889997777
              salary: 72000
              ticket_count: 0

    delete:
      tags:
        - Mechanics
      summary: "Enpoint to delete a mechanic"
      description: "Endpoint to delete a mechanic."
      parameters:
        - in: "path"
          name: "mechanic_id"
          required: true
          type: "integer"
          description: "The ID of the mechanic to delete."
      responses:
        200:
          description: "Successfully Deleted Mechanic"           
          schema:
            $ref: "#/definitions/DeleteMechanicResponse"
          examples:
            application/json:
              message: "Mechanic was successfully deleted <mechanic_id>."

  /mechanics/most-tickets:
    get:
      tags:
        - Mechanics
      summary: "Returns all Mechanics sorted by most tickets assigned"
      description: "Endpoint to retrieve a list of all mechanics sorted by most tickets assigned."
      responses:
        200:
          description: "Retrieved Mechanics Successfully"           
          schema:
            $ref: "#/definitions/SortedMechanics"
          examples:
            application/json:
              - id: 1
                name: John Mechanic
                ticket_count: 7
              - id: 2
                name: Mike Mechanic
                ticket_count: 2


  /service-tickets:
    post:
      tags:
        - Service Tickets
      summary: "Endpoint to add a new service ticket."
      description: "Endpoint to add a new service ticket in our Mechanic Shop system."
      parameters:
        - in: "body"
          name: "body"
          description: "Information required to create a new Service Ticket."
          required: true
          schema:
            $ref: "#/definitions/CreateServiceTicketPayload"
      responses:
        201:
          descriptions: "Successful Service Ticket Creation"
          schema:
            $ref: "#/definitions/CreateServiceTicketResponse"
          examples:
            application/json:
              id: 1
              vin: HCJ12365464243
              service_date: 2012-12-15
              service_desc: "Replace front bumper"
              customer_id: 1
              customer: 
              mechanics:
              parts:

    get:
      tags:
        - Service Tickets
      summary: "Returns all Service Tickets"
      description: "Endpoint to retrieve a list of all service tickets."
      responses:
        200:
          description: "Retrieved Service Tickets Successfully"           
          schema:
            $ref: "#/definitions/AllServiceTickets"


  /service-tickets/{service_ticket_id}:
    put:
      tags:
        - Service Tickets
      summary: "Endpoint to edit mechanics or parts on a service ticket."
      description: "Endpoint to edit mechanics or parts on a service ticket."
      parameters: 
        - in: "path"
          name: "service_ticket_id"
          required: true
          type: "integer"
          description: "The ID of the service ticket to update."
        - in: "body"
          name: "body"
          description: "Information required to update a Service Ticket."
          required: true
          schema: 
            $ref: "#/definitions/UpdateServiceTicketPayload"
      responses: 
        200:
          descriptions: "Successfully Updated Service Ticket"
          schema: 
            $ref: "#/definitions/UpdateServiceTicketResponse"
          examples:
            application/json:
              id: 1
              add_mechanic_ids: [1]
              remove_mechanic_ids: []
              add_part_id: 2

    delete:
      tags:
        - Service Tickets
      summary: "Enpoint to delete a service ticket"
      description: "Endpoint to delete a service ticket."
      parameters:
        - in: "path"
          name: "service_ticket_id"
          required: true
          type: "integer"
          description: "The ID of the service ticket to delete."
      responses:
        200:
          description: "Successfully Deleted Service Ticket"           
          schema:
            $ref: "#/definitions/DeleteServiceTicketResponse"
          examples:
            application/json:
              message: "Service Ticket was successfully deleted <service_ticket_id>."

  /service-tickets/my-tickets:
    get:
      tags:
        - Service Tickets
      summary: "Returns all Service Tickets for a specific Customer"
      description: "Endpoint to retrieve all Service Tickets for a specific Customer"
      security:
        - bearerAuth: []
      responses:
        200:
          description: "Retrieved Service Tickets Successfully"           
          schema:
            $ref: "#/definitions/AllServiceTickets"


definitions: 

  LoginCredentials:
    type: "object"
    properties:
      email:
        type: "string"
      password:
        type: "string"
      
    required:
      - email
      - password
    

  LoginResponse:
    type: "object"
    properties:
      token:
        type: "string"
      message:
        type: "string"
      status:
        type: "string"


  CreateCustomerPayload:
    type: "object"
    properties:
      name:
        type: "string"
      email:
        type: "string"
      phone:
        type: "string"
      password:
        type: "string"
      
    required:
      - name
      - email
      - phone
      - password


  CreateCustomerResponse:
    type: "object"
    properties:
      id:
        type: "integer"
      name:
        type: "string"
      email:
        type: "string"
      phone:
        type: "string"
      password:
        type: "string"


  AllCustomers:
    type: "array"
    items:
      type: "object"
      properties:
        id:
          type: "integer"
        name:
          type: "string"
        email:
          type: "string"
        phone:
          type: "string"
        password:
          type: "string"


  UpdateCustomerPayload:
    type: "object"
    properties:
      name:
        type: "string"
      email:
        type: "string"
      phone:
        type: "string"
      password:
        type: "string"
      
    required:
      - name
      - email
      - phone
      - password


  UpdateCustomerResponse:
    type: "object"
    properties:
      id:
        type: "integer"
      name:
        type: "string"
      email:
        type: "string"
      phone:
        type: "string"
      password:
        type: "string"


  DeleteCustomerResponse:
    type: "object"
    properties:
      message:
        type: "string"   
  

  CreatePartPayload:
    type: "object"
    properties:
      name:
        type: "string"
      price:
        type: "number"
        format: "float"
      
    required:
      - name
      - price


  CreatePartResponse:
    type: "object"
    properties:
      id:
        type: "integer"
      name:
        type: "string"
      price:
        type: "number"
        format: "float"


  AllInventory:
    type: "array"
    items:
      type: "object"
      properties:
        id:
          type: "integer"
        name:
          type: "string"
        price:
          type: "number"
          format: "float"


  UpdatePartPayload:
    type: "object"
    properties:
      name:
        type: "string"
      price:
        type: "number"
        format: "float"
      
    required:
      - name
      - price


  UpdatePartResponse:
    type: "object"
    properties:
      id:
        type: "integer"
      name:
        type: "string"
      price:
        type: "number"
        format: "float"


  DeletePartResponse:
    type: "object"
    properties:
      message:
        type: "string"   


  CreateMechanicPayload:
    type: "object"
    properties:
      name:
        type: "string"
      email: 
        type: "string"
      phone: 
        type: "string"
      salary:
        type: "number"
        format: "float"
      
    required:
      - name
      - email
      - phone
      - salary


  CreateMechanicResponse:
    type: "object"
    properties:
      id:
        type: "integer"
      name:
        type: "string"
      email: 
        type: "string"
      phone: 
        type: "string"
      salary:
        type: "number"
        format: "float"


  AllMechanics:
    type: "array"
    items:
      type: "object"
      properties:
        id:
          type: "integer"
        name:
          type: "string"
        email: 
          type: "string"
        phone: 
          type: "string"
        salary:
          type: "number"
          format: "float"
        ticket_count:
          type: "string"


  SortedMechanics:
    type: "array"
    items:
      type: "object"
      properties:
        id:
          type: "integer"
        name:
          type: "string"
        ticket_count:
          type: "integer"
          description: "Number of tickets assigned to the mechanic"


  UpdateMechanicPayload:
    type: "object"
    properties:
      name:
        type: "string"
      email: 
        type: "string"
      phone: 
        type: "string"
      salary:
        type: "number"
        format: "float"
      
    required:
      - name
      - email
      - phone
      - salary


  UpdateMechanicResponse:
    type: "object"
    properties:
      id:
        type: "integer"
      name:
        type: "string"
      email: 
        type: "string"
      phone: 
        type: "string"
      salary:
        type: "number"
        format: "float"


  DeleteMechanicResponse:
    type: "object"
    properties:
      message:
        type: "string"   


  CreateServiceTicketPayload:
    type: "object"
    properties:
      vin:
        type: "string"
      service_date: 
        type: "string"
      service_desc: 
        type: "string"
      customer_id:
        type: "integer"
      mechanic_ids:     # This isn't required for creating a service ticket. Not listed in required.
        type: "array"
        items:
          type: "integer"
      
    required:
      - vin
      - service_date
      - service_desc
      - customer_id


  CreateServiceTicketResponse:
    type: "object"
    properties:
      vin:
        type: "string"
      service_date: 
        type: "string"
      service_desc: 
        type: "string"
      customer_id:
        type: "integer"
      customer: 
        type: "object"
      mechanics:
        type: "object"
      parts:
        type: "object"


  AllServiceTickets:
    type: "array"
    items:
      type: "object"
      properties:
      vin:
        type: "string"
      service_date: 
        type: "string"
      service_desc: 
        type: "string"
      customer_id:
        type: "integer"
      customer: 
        type: "object"
      mechanics:
        type: "object"
      parts:
        type: "object"


  UpdateServiceTicketPayload:
    type: "object"
    properties:
      add_mechanic_ids:
        type: "array"
        items:
          type: "integer"
      remove_mechanic_ids: 
        type: "array"
        items:
          type: "integer"
      add_part_id: 
        type: "integer"
    required: []


  UpdateServiceTicketResponse:
    type: "object"
    items:
      type: "object"
      properties:
      vin:
        type: "string"
      service_date: 
        type: "string"
      service_desc: 
        type: "string"
      customer_id:
        type: "integer"
      customer: 
        type: "object"
      mechanics:
        type: "object"
      parts:
        type: "object"
      

  DeleteServiceTicketResponse:
    type: "object"
    properties:
      message:
        type: "string"   